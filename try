import json
from networkx import DiGraph
from sys import maxsize 
from itertools import permutations
from vrpy import VehicleRoutingProblem
#from ortools.linear_solver import pywrapcp

def create_data_model(dist_matrix):
    data = {}
    data["distance_matrix"] = dist_matrix
    data["num_vehicles"] = 1
    data["depot"] = len(dist_matrix[0])-1
    return data

#manager = pywrapcp.RoutingIndexManager(len(data["distance_matrix"]), data["num_vehicles"], data["depot"])
#routing = pywrapcp.RoutingModel(manager)

f = open("InputData\level0.json")
data = json.load(f)
f.close()

n_neighbourhoods = data["n_neighbourhoods"]
n_restaurants = data["n_restaurants"]

dist_matrix = []

i = 0
for n in data["neighbourhoods"]:
    dist = data["neighbourhoods"][n]["distances"]
    dist.append(data["restaurants"]["r0"]["neighbourhood_distance"][i])
    i += 1
    dist_matrix.append(dist)

dist = data["restaurants"]["r0"]["neighbourhood_distance"]
dist.append(0)
dist_matrix.append(dist)

n = n_neighbourhoods+1
dist = dist_matrix
memo = [[-1]*(1 << (n+1)) for _ in range(n+1)]

def fun(i, mask):
	# base case
	# if only ith bit and 1st bit is set in our mask,
	# it implies we have visited all other nodes already
	if mask == ((1 << i) | 3):
		return dist[1][i]

	# memoization
	if memo[i][mask] != -1:
		return memo[i][mask]

	res = 10**9 # result of this sub-problem

	# we have to travel all nodes j in mask and end the path at ith node
	# so for every node j in mask, recursively calculate cost of 
	# travelling all nodes in mask
	# except i and then travel back from node j to node i taking 
	# the shortest path take the minimum of all possible j nodes
	for j in range(1, n+1):
		if (mask & (1 << j)) != 0 and j != i and j != 1:
			res = min(res, fun(j, mask & (~(1 << i))) + dist[j][i])
	memo[i][mask] = res # storing the minimum value
	return res

# Driver program to test above logic
ans = 10**9
for i in range(1, n+1):
	# try to go from node 1 visiting all nodes in between to i
	# then return from i taking the shortest route to 1
	ans = min(ans, fun(i, (1 << (n+1))-1) + dist[i][1])

print("The cost of most efficient tour = " + str(ans))

{"v0": {"path": ["r0", "n13", "n11", "n0", "n5", "n6", "n7", "n19", "n17", "n14", "n10", "n15", "n4", "n12", "n9", "n2", "n18", "n1", "n16", "n3", "n8", "r0"]}}